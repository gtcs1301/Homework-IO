{"version":3,"sources":["components/Navbar.js","components/Function.js","components/FunctionList.js","App.js","constants/Constants.js","index.js"],"names":["Navbar","props","className","role","aria-label","style","display","transformOrigin","transition","transform","darkMode","onClick","toggleMode","Function","name","index","functionList","length","color","removeFunction","addFunction","noValidate","autoComplete","onSubmit","e","preventDefault","TextField","value","onChange","event","setName","label","variant","regularCases","map","item","key","testCase","changeTestCase","marginLeft","weight","changeWeight","removeTestCase","addTestCase","edgeCases","Checkbox","checked","returnProblem","toggleReturnProblem","FunctionList","useState","setFunctionList","homeworkNumber","setHomeworkNumber","solutionText","setSolutionText","functionIndex","newList","target","regular","caseIndex","func","cases","push","window","alert","splice","last","width","alignItems","marginBottom","Button","component","height","type","file","files","fileReader","FileReader","onload","text","result","readAsText","updateSolutionText","zip","JSZip","hwNum","padStart","folder","autograder_template","forEach","testCases","count","points","returnOrPrint","substring","toLowerCase","parseFloat","funcString","generateAsync","then","blob","saveAs","generateZIP","App","currentTime","Date","getHours","toggleDarkMode","useEffect","document","body","backgroundColor","ReactDOM","render","getElementById"],"mappings":"+PA4CeA,EAxCA,SAACC,GACd,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eAAf,yBAEE,0BAAMC,KAAK,MAAMC,aAAW,SAA5B,iBAKF,yBAAKF,UAAU,iBAEf,yBACEG,MAAO,CACLC,QAAS,OACTC,gBAAiB,SACjBC,WAAY,gBACZC,UAAU,GAAD,OAAKR,EAAMS,SAAW,GAAK,oBAGrCT,EAAMS,SACL,kBAAC,IAAD,CACER,UAAU,cACVS,QAAS,kBAAMV,EAAMW,cACrBP,MAAO,CAAEG,WAAY,UAGvB,kBAAC,IAAD,CACEN,UAAU,cACVS,QAAS,kBAAMV,EAAMW,cACrBP,MAAO,CAAEG,WAAY,c,4DCoJpBK,EAjLE,SAACZ,GAChB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,mBACb,yCACY,8BAAOD,EAAMa,OAGR,IAAhBb,EAAMc,OAAed,EAAMc,QAAUd,EAAMe,aAAaC,OAAS,EAChE,kBAAC,IAAD,CACEf,UAAU,aACVG,MAAO,CAAEa,MAAO,OAChBP,QAAS,kBAAMV,EAAMkB,eAAelB,EAAMc,UAG5C,qCAGDd,EAAMc,QAAUd,EAAMe,aAAaC,OAAS,EAC3C,kBAAC,IAAD,CACEf,UAAU,aACVG,MAAO,CAAEa,MAAO,SAChBP,QAAS,kBAAMV,EAAMmB,iBAGvB,sCAIJ,yBAAKlB,UAAU,YAEf,0BACEA,UAAU,qBACVmB,YAAU,EACVC,aAAa,MACbC,SAAU,SAACC,GAAD,OAAOA,EAAEC,mBAEnB,yBAAKvB,UAAU,uBACb,yBAAKA,UAAU,cACb,+CAEF,4BACE,4BACE,kBAACwB,EAAA,EAAD,CACEC,MAAO1B,EAAMa,KACbc,SAAU,SAACC,GAAD,OAAW5B,EAAM6B,QAAQD,EAAO5B,EAAMc,QAChDgB,MAAM,mBACNC,QAAQ,gBAMhB,yBAAK9B,UAAU,0BACb,yBAAKA,UAAU,cACb,4CAEF,yBAAKA,UAAU,cACb,4BACGD,EAAMgC,aAAaC,KAAI,SAACC,EAAMpB,GAAP,OACtB,wBAAIqB,IAAKrB,GACP,kBAACW,EAAA,EAAD,CACEC,MAAOQ,EAAKE,SACZT,SAAU,SAACC,GAAD,OACR5B,EAAMqC,eAAeT,GAAO,EAAM5B,EAAMc,MAAOA,IAEjDgB,MAAM,uBACNC,QAAQ,aAGV,kBAACN,EAAA,EAAD,CACErB,MAAO,CAAEkC,WAAY,QACrBZ,MAAOQ,EAAKK,OACZZ,SAAU,SAACC,GAAD,OACR5B,EAAMwC,aAAaZ,GAAO,EAAM5B,EAAMc,MAAOA,IAE/CgB,MAAM,kBACNC,QAAQ,aAGC,IAAVjB,GAAeA,IAAUd,EAAMgC,aAAahB,OAAS,EACpD,kBAAC,IAAD,CACEf,UAAU,aACVG,MAAO,CAAEa,MAAO,OAChBP,QAAS,kBACPV,EAAMyC,gBAAe,EAAMzC,EAAMc,MAAOA,MAI5C,qCAGDA,IAAUd,EAAMgC,aAAahB,OAAS,EACrC,kBAAC,IAAD,CACEf,UAAU,aACVG,MAAO,CAAEa,MAAO,SAChBP,QAAS,kBAAMV,EAAM0C,aAAY,EAAM1C,EAAMc,UAG/C,4CAQZ,yBAAKb,UAAU,uBACb,yBAAKA,UAAU,cACb,4CAEF,4BACGD,EAAM2C,UAAUV,KAAI,SAACC,EAAMpB,GAAP,OACnB,wBAAIqB,IAAKrB,GACP,kBAACW,EAAA,EAAD,CACEC,MAAOQ,EAAKE,SACZT,SAAU,SAACC,GAAD,OACR5B,EAAMqC,eAAeT,GAAO,EAAO5B,EAAMc,MAAOA,IAElDgB,MAAM,uBACNC,QAAQ,aAGV,kBAACN,EAAA,EAAD,CACErB,MAAO,CAAEkC,WAAY,QACrBZ,MAAOQ,EAAKK,OACZZ,SAAU,SAACC,GAAD,OACR5B,EAAMwC,aAAaZ,GAAO,EAAO5B,EAAMc,MAAOA,IAEhDgB,MAAM,kBACNC,QAAQ,aAGC,IAAVjB,GAAeA,IAAUd,EAAM2C,UAAU3B,OAAS,EACjD,kBAAC,IAAD,CACEf,UAAU,aACVG,MAAO,CAAEa,MAAO,OAChBP,QAAS,kBACPV,EAAMyC,gBAAe,EAAOzC,EAAMc,MAAOA,MAI7C,qCAGDA,IAAUd,EAAM2C,UAAU3B,OAAS,EAClC,kBAAC,IAAD,CACEf,UAAU,aACVG,MAAO,CAAEa,MAAO,SAChBP,QAAS,kBAAMV,EAAM0C,aAAY,EAAO1C,EAAMc,UAGhD,2CAOV,yBAAKb,UAAU,uBACb,yBAAKA,UAAU,cACb,gDAEF,4BACE,4BACE,kBAAC2C,EAAA,EAAD,CACEC,QAAS7C,EAAM8C,cACfnB,SAAU,kBAAM3B,EAAM+C,oBAAoB/C,EAAMc,gB,kCC+OjDkC,EArZM,WAAM,MAEeC,mBAAS,CAC/C,CACEpC,KAAM,GACNiC,eAAe,EACfd,aAAc,CACZ,CACEI,SAAU,GACVG,OAAQ,KAGZI,UAAW,CACT,CACEP,SAAU,GACVG,OAAQ,QAfS,mBAElBxB,EAFkB,KAEJmC,EAFI,OAsBmBD,mBAAS,IAtB5B,mBAsBlBE,EAtBkB,KAsBFC,EAtBE,OAyBeH,mBAAS,IAzBxB,mBAyBlBI,EAzBkB,KAyBJC,EAzBI,KA2BnBP,EAAsB,SAACQ,GAC3B,IAAMC,EAAO,YAAOzC,GACpByC,EAAQD,GAAeT,eAAiBU,EAAQD,GAC7CT,cACHI,EAAgBM,IAGZ3B,EAAU,SAACD,EAAO2B,GACtB,IAAMC,EAAO,YAAOzC,GACpByC,EAAQD,GAAe1C,KAAOe,EAAM6B,OAAO/B,MAC3CwB,EAAgBM,IAGZnB,EAAiB,SAACT,EAAO8B,EAASH,EAAeI,GACrD,IAAMH,EAAO,YAAOzC,GACd6C,EAAOJ,EAAQD,IACPG,EAAUE,EAAK5B,aAAe4B,EAAKjB,WAC3CgB,GAAWvB,SAAWR,EAAM6B,OAAO/B,MACzCwB,EAAgBM,IAGZhB,EAAe,SAACZ,EAAO8B,EAASH,EAAeI,GACnD,IAAMH,EAAO,YAAOzC,GACd6C,EAAOJ,EAAQD,IACPG,EAAUE,EAAK5B,aAAe4B,EAAKjB,WAC3CgB,GAAWpB,OAASX,EAAM6B,OAAO/B,MACvCwB,EAAgBM,IAGZd,EAAc,SAACgB,EAASH,GAC5B,IAAMC,EAAO,YAAOzC,GACd6C,EAAOJ,EAAQD,GACfM,EAAQH,EAAUE,EAAK5B,aAAe4B,EAAKjB,UAC7CkB,EAAMA,EAAM7C,OAAS,GAAGoB,UAAYyB,EAAMA,EAAM7C,OAAS,GAAGuB,OAC9DsB,EAAMC,KAAK,CACT1B,SAAU,GACVG,OAAQ,KAEPwB,OAAOC,MAAM,mCAClBd,EAAgBM,IAGZf,EAAiB,SAACiB,EAASH,EAAeI,GAC9C,IAAMH,EAAO,YAAOzC,GACd6C,EAAOJ,EAAQD,IACPG,EAAUE,EAAK5B,aAAe4B,EAAKjB,WAC3CsB,OAAON,EAAW,GACxBT,EAAgBM,IAGZrC,EAAc,WAClB,IAAMqC,EAAO,YAAOzC,GACdmD,EAAOV,EAAQA,EAAQxC,OAAS,GAEpCkD,EAAKrD,MACLqD,EAAKlC,aAAa,GAAGI,UACrB8B,EAAKlC,aAAa,GAAGO,OAErBiB,EAAQM,KAAK,CACXjD,KAAM,GACNiC,eAAe,EACfd,aAAc,CACZ,CACEI,SAAU,GACVG,OAAQ,KAGZI,UAAW,CACT,CACEP,SAAU,GACVG,OAAQ,OAIXwB,OAAOC,MAAM,yDAClBd,EAAgBM,IAGZtC,EAAiB,SAACqC,GACtB,IAAMC,EAAO,YAAOzC,GACpByC,EAAQS,OAAOV,EAAe,GAC9BL,EAAgBM,IAqNlB,OACE,yBAAKvD,UAAU,2BACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,mBACb,kDAGF,yBAAKA,UAAU,YAEf,yBAAKA,UAAU,sBAAsBG,MAAO,CAAE+D,MAAO,SACnD,yBACElE,UAAU,aACVG,MAAO,CAAEC,QAAS,OAAQ+D,WAAY,WAEtC,qCAEF,4BACE,4BACE,kBAAC3C,EAAA,EAAD,CACEC,MAAOyB,EACPxB,SAAU,SAACC,GAAD,OAAWwB,EAAkBxB,EAAM6B,OAAO/B,QACpDI,MAAM,SACNC,QAAQ,gBAMfhB,EAAakB,KAAI,SAAC2B,EAAM9C,GAAP,OAChB,kBAAC,EAAD,CACEqB,IAAKrB,EACLA,MAAOA,EACPD,KAAM+C,EAAK/C,KACXiC,cAAec,EAAKd,cACpBd,aAAc4B,EAAK5B,aACnBW,UAAWiB,EAAKjB,UAChBd,QAASA,EACTQ,eAAgBA,EAChBK,YAAaA,EACbD,eAAgBA,EAChBtB,YAAaA,EACbD,eAAgBA,EAChBH,aAAcA,EACdyB,aAAcA,EACdO,oBAAqBA,OAIzB,yBAAK9C,UAAU,UAAUG,MAAO,CAAEiE,aAAc,UAEhD,yBAAKpE,UAAU,UACb,kBAACqE,EAAA,EAAD,CACEvC,QAAQ,YACRwC,UAAU,QACVnE,MAAO,CAAEoE,OAAQ,OAAQL,MAAO,UAE/Bd,EAAe,WAAa,SAC7B,2BACEoB,KAAK,OACL9C,SAAU,SAACC,GAAD,OA7QK,SAACA,GAC1B,IAAM8C,EAAO9C,EAAM6B,OAAOkB,MAAM,GAC1BC,EAAa,IAAIC,WACvBD,EAAWE,OAAS,WAClB,IAAMC,EAAOH,EAAWI,OACxB1B,EAAgByB,IAElBH,EAAWK,WAAWP,GAsQSQ,CAAmBtD,IACxCxB,MAAO,CAAEC,QAAS,WAItB,kBAACiE,EAAA,EAAD,CACEvC,QAAQ,YACRd,MAAM,UACNsD,UAAU,QACVnE,MAAO,CACLkC,WAAY,OACZkC,OAAQ,OACRL,MAAO,QACPE,aAAc,QAEhB3D,QAAS,kBAlRC,WAClB,IAAMyE,EAAM,IAAIC,IAEVC,EAAQlC,EAAemC,SAAS,EAAG,KAGzCH,EAAIT,KACF,iBADF,qHAMqDW,EANrD,4FAcAF,EAAIT,KACF,mBADF,+CAQAS,EAAIT,KACF,eADF,+OAWAS,EAAIT,KACF,WADF,mIAUAS,EAAII,OAAO,SAASb,KAApB,YAA8BW,EAA9B,gBAAmDhC,GAGnD,IAAImC,EAAmB,8CACZH,EADY,+DAIhBA,EAJgB,4BAKhBA,EALgB,kuBA6BbA,EA7Ba,uxFAqGvBtE,EAAa0E,SAAQ,YAAuD,IAApD5E,EAAmD,EAAnDA,KAAMmB,EAA6C,EAA7CA,aAAcW,EAA+B,EAA/BA,UAAWG,EAAoB,EAApBA,cACjD4C,EAAY,GACZC,EAAQ,EACRC,EAAS,EACPC,EAAgB/C,EAAgB,SAAW,QAEjD4C,GAAS,6BAET1D,EAAayD,SAAQ,YAA2B,IAAxBrD,EAAuB,EAAvBA,SAAUG,EAAa,EAAbA,OAC5BH,GAAYG,IACdmD,GAAS,sBAAmBnD,EAAnB,2BACJ1B,EADI,YACI8E,EADJ,+BAEN9E,EAFM,mBAESuB,EAAS0D,UAAU,EAAG1D,EAASpB,OAAS,GAFjD,+BAGFoB,EAHE,0BAIJyD,EAAcE,cAJV,uBAIsClF,EAJtC,iBAImDA,EAJnD,gBAKT8E,GAAS,EACTC,GAAUI,WAAWzD,OAIzBmD,GAAS,qBAET/C,EAAU8C,SAAQ,YAA2B,IAAxBrD,EAAuB,EAAvBA,SAAUG,EAAa,EAAbA,OACzBH,GAAYG,IACdmD,GAAS,sBAAmBnD,EAAnB,2BACJ1B,EADI,YACI8E,EADJ,+BAEN9E,EAFM,mBAESuB,EAAS0D,UAAU,EAAG1D,EAASpB,OAAS,GAFjD,+BAGFoB,EAHE,gCAIEyD,EAJF,uBAI8BhF,EAJ9B,iBAI2CA,EAJ3C,gBAKT8E,GAAS,EACTC,GAAUI,WAAWzD,OAIzB,IAAM0D,EAAU,gBAAYpF,EAAZ,aAAqB+E,EAArB,cAChBJ,GAAmB,UAAOS,EAAP,aAAsBP,MAI3CP,EAAII,OAAO,SAASb,KAAK,WAAYc,GAGrCL,EAAIe,cAAc,CAAEzB,KAAM,SAAU0B,MAAK,SAACC,GACxCC,iBAAOD,EAAD,YAAYf,EAAZ,uBA8EeiB,KAVjB,gBCrWKC,G,MA7BH,WACV,IAAMC,GAAc,IAAIC,MAAOC,WADf,EAImBzD,mBACjCuD,EAAc,GAAKA,GAAe,IALpB,mBAIT/F,EAJS,KAICkG,EAJD,KAoBhB,OANAC,qBAAU,WACRC,SAASC,KAAK1G,MAAM2G,gBAAkBtG,ECpBT,UADC,aD2B9B,yBAAKR,UAAWQ,EAAW,kBAAoB,oBAC7C,kBAAC,EAAD,CAAQA,SAAUA,EAAUE,WAbb,WACjBgG,GAAgBlG,MAad,yBAAKR,UAAU,wBACf,kBAAC,EAAD,SE1BN+G,IAASC,OAAO,kBAAC,EAAD,MAASJ,SAASK,eAAe,W","file":"static/js/main.2b637809.chunk.js","sourcesContent":["import React from \"react\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport NightsStayIcon from \"@material-ui/icons/NightsStay\";\n\nconst Navbar = (props) => {\n  return (\n    <header className=\"navbar\">\n      <div className=\"navbar-items\">\n        <div className=\"navbar-name\">\n          CS1301 Homework IO&nbsp;\n          <span role=\"img\" aria-label=\"emoji\">\n            ðŸ¤–\n          </span>\n        </div>\n\n        <div className=\"navbar-space\" />\n\n        <div\n          style={{\n            display: \"flex\",\n            transformOrigin: \"center\",\n            transition: \"0.3s ease-out\",\n            transform: `${props.darkMode ? \"\" : \"rotate(360deg)\"}`,\n          }}\n        >\n          {props.darkMode ? (\n            <Brightness4Icon\n              className=\"navbar-mode\"\n              onClick={() => props.toggleMode()}\n              style={{ transition: \"0.3s\" }}\n            />\n          ) : (\n            <NightsStayIcon\n              className=\"navbar-mode\"\n              onClick={() => props.toggleMode()}\n              style={{ transition: \"0.3s\" }}\n            />\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nconst Function = (props) => {\n  return (\n    <div className=\"function-card\">\n      <div className=\"function-header\">\n        <h2>\n          Function: <span>{props.name}</span>\n        </h2>\n\n        {props.index !== 0 && props.index !== props.functionList.length - 1 ? (\n          <RemoveCircleIcon\n            className=\"form-icons\"\n            style={{ color: \"red\" }}\n            onClick={() => props.removeFunction(props.index)}\n          />\n        ) : (\n          <></>\n        )}\n\n        {props.index === props.functionList.length - 1 ? (\n          <AddCircleIcon\n            className=\"form-icons\"\n            style={{ color: \"green\" }}\n            onClick={() => props.addFunction()}\n          />\n        ) : (\n          <></>\n        )}\n      </div>\n\n      <div className=\"divider\" />\n\n      <form\n        className=\"function-card-form\"\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e) => e.preventDefault()}\n      >\n        <div className=\"function-name-field\">\n          <div className=\"form-label\">\n            <h3>Function Name:</h3>\n          </div>\n          <ul>\n            <li>\n              <TextField\n                value={props.name}\n                onChange={(event) => props.setName(event, props.index)}\n                label=\"ex: magicSquares\"\n                variant=\"outlined\"\n              />\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"function-regular-field\">\n          <div className=\"form-label\">\n            <h3>Test Cases:</h3>\n          </div>\n          <div className=\"input-list\">\n            <ul>\n              {props.regularCases.map((item, index) => (\n                <li key={index}>\n                  <TextField\n                    value={item.testCase}\n                    onChange={(event) =>\n                      props.changeTestCase(event, true, props.index, index)\n                    }\n                    label=\"[arg1, arg2, . . . ]\"\n                    variant=\"outlined\"\n                  />\n\n                  <TextField\n                    style={{ marginLeft: \"20px\" }}\n                    value={item.weight}\n                    onChange={(event) =>\n                      props.changeWeight(event, true, props.index, index)\n                    }\n                    label=\"weight (number)\"\n                    variant=\"outlined\"\n                  />\n\n                  {index !== 0 && index !== props.regularCases.length - 1 ? (\n                    <RemoveCircleIcon\n                      className=\"form-icons\"\n                      style={{ color: \"red\" }}\n                      onClick={() =>\n                        props.removeTestCase(true, props.index, index)\n                      }\n                    />\n                  ) : (\n                    <></>\n                  )}\n\n                  {index === props.regularCases.length - 1 ? (\n                    <AddCircleIcon\n                      className=\"form-icons\"\n                      style={{ color: \"green\" }}\n                      onClick={() => props.addTestCase(true, props.index)}\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"function-edge-field\">\n          <div className=\"form-label\">\n            <h3>Edge Cases:</h3>\n          </div>\n          <ul>\n            {props.edgeCases.map((item, index) => (\n              <li key={index}>\n                <TextField\n                  value={item.testCase}\n                  onChange={(event) =>\n                    props.changeTestCase(event, false, props.index, index)\n                  }\n                  label=\"[arg1, arg2, . . . ]\"\n                  variant=\"outlined\"\n                />\n\n                <TextField\n                  style={{ marginLeft: \"20px\" }}\n                  value={item.weight}\n                  onChange={(event) =>\n                    props.changeWeight(event, false, props.index, index)\n                  }\n                  label=\"weight (number)\"\n                  variant=\"outlined\"\n                />\n\n                {index !== 0 && index !== props.edgeCases.length - 1 ? (\n                  <RemoveCircleIcon\n                    className=\"form-icons\"\n                    style={{ color: \"red\" }}\n                    onClick={() =>\n                      props.removeTestCase(false, props.index, index)\n                    }\n                  />\n                ) : (\n                  <></>\n                )}\n\n                {index === props.edgeCases.length - 1 ? (\n                  <AddCircleIcon\n                    className=\"form-icons\"\n                    style={{ color: \"green\" }}\n                    onClick={() => props.addTestCase(false, props.index)}\n                  />\n                ) : (\n                  <></>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"function-name-field\">\n          <div className=\"form-label\">\n            <h3>Return Problem:</h3>\n          </div>\n          <ul>\n            <li>\n              <Checkbox\n                checked={props.returnProblem}\n                onChange={() => props.toggleReturnProblem(props.index)}\n              />\n            </li>\n          </ul>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Function;\n","import React, { useState } from \"react\";\nimport Function from \"./Function\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport JSZip from \"jszip\";\nimport { saveAs } from \"file-saver\";\n\nconst FunctionList = () => {\n  // list of functions and their test cases\n  const [functionList, setFunctionList] = useState([\n    {\n      name: \"\",\n      returnProblem: true,\n      regularCases: [\n        {\n          testCase: \"\",\n          weight: \"\",\n        },\n      ],\n      edgeCases: [\n        {\n          testCase: \"\",\n          weight: \"\",\n        },\n      ],\n    },\n  ]);\n\n  // which homework is the user writing\n  const [homeworkNumber, setHomeworkNumber] = useState(\"\");\n\n  // the code within the solution file\n  const [solutionText, setSolutionText] = useState(\"\");\n\n  const toggleReturnProblem = (functionIndex) => {\n    const newList = [...functionList];\n    newList[functionIndex].returnProblem = !newList[functionIndex]\n      .returnProblem;\n    setFunctionList(newList);\n  };\n\n  const setName = (event, functionIndex) => {\n    const newList = [...functionList];\n    newList[functionIndex].name = event.target.value;\n    setFunctionList(newList);\n  };\n\n  const changeTestCase = (event, regular, functionIndex, caseIndex) => {\n    const newList = [...functionList];\n    const func = newList[functionIndex];\n    const cases = regular ? func.regularCases : func.edgeCases;\n    cases[caseIndex].testCase = event.target.value;\n    setFunctionList(newList);\n  };\n\n  const changeWeight = (event, regular, functionIndex, caseIndex) => {\n    const newList = [...functionList];\n    const func = newList[functionIndex];\n    const cases = regular ? func.regularCases : func.edgeCases;\n    cases[caseIndex].weight = event.target.value;\n    setFunctionList(newList);\n  };\n\n  const addTestCase = (regular, functionIndex) => {\n    const newList = [...functionList];\n    const func = newList[functionIndex];\n    const cases = regular ? func.regularCases : func.edgeCases;\n    if (cases[cases.length - 1].testCase && cases[cases.length - 1].weight)\n      cases.push({\n        testCase: \"\",\n        weight: \"\",\n      });\n    else window.alert(\"Please enter a valid test case!\");\n    setFunctionList(newList);\n  };\n\n  const removeTestCase = (regular, functionIndex, caseIndex) => {\n    const newList = [...functionList];\n    const func = newList[functionIndex];\n    const cases = regular ? func.regularCases : func.edgeCases;\n    cases.splice(caseIndex, 1);\n    setFunctionList(newList);\n  };\n\n  const addFunction = () => {\n    const newList = [...functionList];\n    const last = newList[newList.length - 1];\n    if (\n      last.name &&\n      last.regularCases[0].testCase &&\n      last.regularCases[0].weight\n    )\n      newList.push({\n        name: \"\",\n        returnProblem: true,\n        regularCases: [\n          {\n            testCase: \"\",\n            weight: \"\",\n          },\n        ],\n        edgeCases: [\n          {\n            testCase: \"\",\n            weight: \"\",\n          },\n        ],\n      });\n    else window.alert(\"Function must have a name and at least one test case!\");\n    setFunctionList(newList);\n  };\n\n  const removeFunction = (functionIndex) => {\n    const newList = [...functionList];\n    newList.splice(functionIndex, 1);\n    setFunctionList(newList);\n  };\n\n  const updateSolutionText = (event) => {\n    const file = event.target.files[0];\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      const text = fileReader.result;\n      setSolutionText(text);\n    };\n    fileReader.readAsText(file);\n  };\n\n  const generateZIP = () => {\n    const zip = new JSZip();\n\n    const hwNum = homeworkNumber.padStart(2, \"0\");\n\n    // write run_autograder\n    zip.file(\n      \"run_autograder\",\n      `#!/usr/bin/env bash\n\n# Set up autograder files\n\ncp /autograder/submission/HW01.py /autograder/source/HW${hwNum}.py\n\ncd /autograder/source\n\npython3 run_tests.py > /autograder/results/results.json`\n    );\n\n    // write requirements.txt\n    zip.file(\n      \"requirements.txt\",\n      `gradescope-utils>=0.2.7\nsubprocess32\nmock`\n    );\n\n    // write run_tests.py\n    zip.file(\n      \"run_tests.py\",\n      `import unittest\nfrom gradescope_utils.autograder_utils.json_test_runner import JSONTestRunner\n\nif __name__ == '__main__':\n    suite = unittest.defaultTestLoader.discover('tests')\n    JSONTestRunner(visibility='visible').run(suite)`\n    );\n\n    // write setup.sh\n    zip.file(\n      \"setup.sh\",\n      `#!/usr/bin/env bash\n\napt-get install -y python3 python3-pip python-dev\n\npip3 install -r /autograder/source/requirements.txt`\n    );\n\n    // write the homework solution\n    zip.folder(\"tests\").file(`HW${hwNum}_solution.py`, solutionText);\n\n    // write the autograder test cases\n    let autograder_template = `# Author: Homework IO\n# Current: HW${hwNum}\n\n# Fill out which HW you're working on\nimport HW${hwNum} as hw\nimport HW${hwNum}_solution as sol\n\n# DO NOT TOUCH\n################################################################################\nimport unittest\nimport mock\nfrom gradescope_utils.autograder_utils.decorators import weight\nimport sys\nfrom contextlib import contextmanager\nfrom io import StringIO\n\n@contextmanager\ndef captured_output():\n    new_out, new_err = StringIO(), StringIO()\n    old_out, old_err = sys.stdout, sys.stderr\n    try:\n        sys.stdout, sys.stderr = new_out, new_err\n        yield sys.stdout, sys.stderr\n    finally:\n        sys.stdout, sys.stderr = old_out, old_err\n################################################################################\n\n# Fill out which HW you're working on\n\nclass TestHW${hwNum}(unittest.TestCase):\n    def setUp(self):\n        pass\n\n# FOR REFERENCE ONLY\n################################################################################\n# Each test case should take the format below\n\n# REGULAR TEST CASE\n# @weight({number of points for this test case})\n# def test_{function name}_{test case number}(self):\n#     \"\"\"{gradescope message}\"\"\"\n#     args = {list of arguments for the function}\n#     value = hw.{function call}\n#     expected = sol.{function call}\n#     self.assertEqual(value, expected)\n\n# HIDDEN EDGE CASES\n# @weight({number of points for this test case})\n# def test_{function name}_{test case number}(self):\n#     \"\"\"{gradescope message}\"\"\"\n#     args = {list of arguments for the function}\n#     value = hw.{function call}\n#     expected = sol.{function call}\n#     self.assertTrue(value == expected)\n\n# Try to make around 3-4 normal cases and 1-2 edge cases per function\n# Be sure to change the weights of your test cases depending on how many test cases you have\n# Make the edge case worth not as much as the other test cases\n# Make sure all your test cases add up to 100 points and you indicate which test cases are edge cases\n# Any questions or suggestions can be directed to Arvin or Anthony!\n\n# DO NOT TOUCH\n################################################################################\n\n    def printProblems(self, hwFunc, solFunc, *args):\n        with captured_output() as (out, err):\n            with mock.patch('builtins.input', side_effect=[*args]):\n                value = hwFunc()\n                hw_output = out.getvalue().strip()\n        with captured_output() as (out, err):\n            with mock.patch('builtins.input', side_effect=[*args]):\n                expected = solFunc()\n                sol_output = out.getvalue().strip()\n        self.assertEqual(hw_output, sol_output)\n\n\n    def returnProblems(self, hwFunc, solFunc, *args):\n        value = hwFunc(*args)\n        expected = solFunc(*args)\n        self.assertEqual(value, expected)\n\n\n    def hiddenPrintProblems(self, hwFunc, solFunc, *args):\n        with captured_output() as (out, err):\n            with mock.patch('builtins.input', side_effect=[*args]):\n                value = hwFunc()\n                hw_output = out.getvalue().strip()\n        with captured_output() as (out, err):\n            with mock.patch('builtins.input', side_effect=[*args]):\n                expected = solFunc()\n                sol_output = out.getvalue().strip()\n        self.assertTrue(hw_output == sol_output)\n\n\n    def hiddenReturnProblems(self, hwFunc, solFunc, *args):\n        value = hwFunc(*args)\n        expected = solFunc(*args)\n        self.assertTrue(value == expected)\n\n################################################################################`;\n\n    functionList.forEach(({ name, regularCases, edgeCases, returnProblem }) => {\n      let testCases = \"\";\n      let count = 1;\n      let points = 0;\n      const returnOrPrint = returnProblem ? \"Return\" : \"Print\";\n\n      testCases += `    # Regular Test Cases\\n`;\n\n      regularCases.forEach(({ testCase, weight }) => {\n        if (testCase && weight) {\n          testCases += `    @weight(${weight})\n    def test_${name}_${count}(self):\n        \"\"\"${name}() with ${testCase.substring(1, testCase.length - 1)}\"\"\"\n        args = ${testCase}\n        self.${returnOrPrint.toLowerCase()}Problems(hw.${name}, sol.${name}, *args)\\n\\n`;\n          count += 1;\n          points += parseFloat(weight);\n        }\n      });\n\n      testCases += `    # Edge Cases\\n`;\n\n      edgeCases.forEach(({ testCase, weight }) => {\n        if (testCase && weight) {\n          testCases += `    @weight(${weight})\n    def test_${name}_${count}(self):\n        \"\"\"${name}() with ${testCase.substring(1, testCase.length - 1)}\"\"\"\n        args = ${testCase}\n        self.hidden${returnOrPrint}Problems(hw.${name}, sol.${name}, *args)\\n\\n`;\n          count += 1;\n          points += parseFloat(weight);\n        }\n      });\n\n      const funcString = `\\n\\n# ${name} [${points} points]\\n`;\n      autograder_template += `${funcString}\\n${testCases}`;\n    });\n\n    // write the tests.py file\n    zip.folder(\"tests\").file(\"tests.py\", autograder_template);\n\n    // save as zip file\n    zip.generateAsync({ type: \"blob\" }).then((blob) => {\n      saveAs(blob, `HW${hwNum}_Autograder.zip`);\n    });\n  };\n\n  return (\n    <div className=\"function-list-container\">\n      <div className=\"function-list\">\n        <div className=\"function-header\">\n          <h2>Homework Details:</h2>\n        </div>\n\n        <div className=\"divider\" />\n\n        <div className=\"function-name-field\" style={{ width: \"100%\" }}>\n          <div\n            className=\"form-label\"\n            style={{ display: \"flex\", alignItems: \"center\" }}\n          >\n            <h3>HW #</h3>\n          </div>\n          <ul>\n            <li>\n              <TextField\n                value={homeworkNumber}\n                onChange={(event) => setHomeworkNumber(event.target.value)}\n                label=\"ex: 07\"\n                variant=\"outlined\"\n              />\n            </li>\n          </ul>\n        </div>\n\n        {functionList.map((func, index) => (\n          <Function\n            key={index}\n            index={index}\n            name={func.name}\n            returnProblem={func.returnProblem}\n            regularCases={func.regularCases}\n            edgeCases={func.edgeCases}\n            setName={setName}\n            changeTestCase={changeTestCase}\n            addTestCase={addTestCase}\n            removeTestCase={removeTestCase}\n            addFunction={addFunction}\n            removeFunction={removeFunction}\n            functionList={functionList}\n            changeWeight={changeWeight}\n            toggleReturnProblem={toggleReturnProblem}\n          />\n        ))}\n\n        <div className=\"divider\" style={{ marginBottom: \"50px\" }} />\n\n        <div className=\"footer\">\n          <Button\n            variant=\"contained\"\n            component=\"label\"\n            style={{ height: \"50px\", width: \"150px\" }}\n          >\n            {solutionText ? \"Received\" : \"Upload\"}\n            <input\n              type=\"file\"\n              onChange={(event) => updateSolutionText(event)}\n              style={{ display: \"none\" }}\n            />\n          </Button>\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            component=\"label\"\n            style={{\n              marginLeft: \"20px\",\n              height: \"50px\",\n              width: \"150px\",\n              marginBottom: \"75px\",\n            }}\n            onClick={() => generateZIP()}\n          >\n            Generate\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FunctionList;\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport FunctionList from \"./components/FunctionList\";\nimport { mainLightModeColor, mainDarkModeColor } from \"./constants/Constants\";\nimport \"./css/App.scss\";\n\nconst App = () => {\n  const currentTime = new Date().getHours();\n\n  // set dark mode based on current local time\n  const [darkMode, toggleDarkMode] = useState(\n    currentTime < 6 || currentTime >= 18\n  );\n\n  // enable toggling of theme\n  const toggleMode = () => {\n    toggleDarkMode(!darkMode);\n  };\n\n  // use side effect for setting body background color\n  useEffect(() => {\n    document.body.style.backgroundColor = darkMode\n      ? mainDarkModeColor\n      : mainLightModeColor;\n  });\n\n  return (\n    <div className={darkMode ? \"ultra dark-mode\" : \"ultra light-mode\"}>\n      <Navbar darkMode={darkMode} toggleMode={toggleMode} />\n      <div className=\"navbar-offset-space\" />\n      <FunctionList />\n    </div>\n  );\n};\n\nexport default App;\n","export const mainLightModeColor = \"#f1f5f7\";\nexport const mainDarkModeColor = \"#1a191e\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}